% =========================================================
IoD-ECC-PBFT
Schnorr-style ECC signatures
% =========================================================

%%%%%% Control_room (RD) %%%%%%

role control_room(CR, RD, GSS, CS: agent,
                  SecureChannel: symmetric_key,
                  h1, h2, h3, h4: hash_func,
                  SND, RCV: channel(dy))
played_by CR
def=
local State: nat,
      s_CR, s_RD, s_GSS, s_CS: text,
      Pub_RD, Pub_GSS, Pub_CS: text,
      TID_RD, TC_RD, TID_GSS, TC_GSS, TID_CS, TC_CS: text
init
  State := 0
transition

  % --- 0) start system: CR publishes params to RD/GSS/CS over secure admin channel
  1. State = 0 /\ RCV(start) =|>
     State' := 1
     /\ s_CR' := new()
     /\ SND({h1, h2, h3, h4}_SecureChannel)

  % --- 1) RD registration
  2. State = 1 /\ RCV({ID_RD}_SecureChannel) =|>
     State' := 2
     /\ s_RD' := new()
     /\ Pub_RD' := h1(s_RD')              % abstract ECC: Pub = h1(sk)
     /\ TID_RD' := h2(ID_RD.Pub_RD')
     /\ TC_RD'  := h3(TID_RD'.s_RD'.s_CR')
     /\ SND({TID_RD', TC_RD', Pub_RD', s_RD'}_SecureChannel)

  % --- 2) GSS registration
  3. State = 2 /\ RCV({ID_GSS}_SecureChannel) =|>
     State' := 3
     /\ s_GSS' := new()
     /\ Pub_GSS' := h1(s_GSS')
     /\ TID_GSS' := h2(ID_GSS.Pub_GSS')
     /\ TC_GSS'  := h3(TID_GSS'.s_GSS'.s_CR')
     /\ SND({TID_GSS', TC_GSS', Pub_GSS', s_GSS'}_SecureChannel)

  % --- 3) CS registration
  4. State = 3 /\ RCV({ID_CS}_SecureChannel) =|>
     State' := 4
     /\ s_CS' := new()
     /\ Pub_CS' := h1(s_CS')
     /\ TID_CS' := h2(ID_CS.Pub_CS')
     /\ TC_CS'  := h3(TID_CS'.s_CS'.s_CR')
     /\ SND({TID_CS', TC_CS', Pub_CS', s_CS'}_SecureChannel)

end role

%%%%%% Remote drone (RD) %%%%%%

role remote_drone(RD, CR, GSS: agent,
                  SecureChannel: symmetric_key,
                  h1, h2, h3, h4: hash_func,
                  SND, RCV: channel(dy))
played_by RD
def=
local State: nat,
      ID_RD, TID_RD, TC_RD, Pub_RD, s_RD: text,
      t_RD, n_RD: text,
      X_RD, Sig_RD: text,
      SessKey_RD_GSS: text
init
  State := 0
transition

  % --- 0) get system params
  1. State = 0 /\ RCV(start) =|>
     State' := 1
     /\ ID_RD' := new()
     /\ SND({ID_RD'}_SecureChannel)

  % --- 1) receive reg data from CR
  2. State = 1 /\ RCV({TID_RD, TC_RD, Pub_RD, s_RD}_SecureChannel) =|>
     State' := 2

  % --- 2) wait for auth request from GSS
  3. State = 2 /\ RCV(GSS, auth_request) =|>
     State' := 3
     /\ t_RD' := new()
     /\ n_RD' := new()
     /\ X_RD' := h1(TID_RD.t_RD'.n_RD')
     % Schnorr-style signature: Sig = h(m || Pub) * sk  (+ nonce part)
     /\ Sig_RD' := h2(TID_RD.Pub_RD.t_RD'.n_RD'.s_RD)
     /\ SND(RD, GSS, TID_RD, Pub_RD, X_RD', Sig_RD', t_RD', n_RD')

  % --- 3) receive SK and sig from GSS over secure admin channel
  4. State = 3 /\ RCV(GSS, {SessKey_RD_GSS', Sig_RD_GSS'}_SecureChannel) =|>
     State' := 4
     /\ SessKey_RD_GSS' := SessKey_RD_GSS'
     % send key confirmation WITHOUT leaking SK
     /\ SND(RD, GSS, {h4(SessKey_RD_GSS')}_(SessKey_RD_GSS'))

end role


%%%%%% Ground Station Server (GSS) %%%%%%

role ground_station(GSS, CR, RD, CS: agent,
                    SecureChannel: symmetric_key,
                    h1, h2, h3, h4: hash_func,
                    SND, RCV: channel(dy))
played_by GSS
def=
local State: nat,
      ID_GSS, TID_GSS, TC_GSS, Pub_GSS, s_GSS: text,
      TID_RD, Pub_RD, X_RD, Sig_RD, t_RD, n_RD: text,
      X_GSS: text,
      SessKey: text
init
  State := 0
transition

  % --- 0) system start
  1. State = 0 /\ RCV({start}) =|>
     State' := 1
     /\ ID_GSS' := new()
     /\ SND({ID_GSS'}_SecureChannel)

  % --- 1) receive its own reg from CR
  2. State = 1 /\ RCV({TID_GSS, TC_GSS, Pub_GSS, s_GSS}_SecureChannel) =|>
     State' := 2
     % request authentication from RD
     /\ SND(GSS, RD, auth_request)

  % --- 2) receive RD auth material over DY
  3. State = 2 /\ RCV(RD, TID_RD, Pub_RD, X_RD, Sig_RD, t_RD, n_RD) =|>
     State' := 3
     % verify RD's Schnorr-style signature
     /\ if (Sig_RD = h2(TID_RD.Pub_RD.t_RD.n_RD.s_GSS)) then
           % derive own contribution
           X_GSS' := h3(TID_GSS.t_RD.n_RD)
           /\ SessKey' := h4(TID_RD.TID_GSS.X_RD.X_GSS'.t_RD.n_RD)
           /\ SND(GSS, RD, {SessKey', h3(SessKey'.TID_GSS)}_SecureChannel)
        else
           SND(GSS, RD, error)
        end if

  % --- 3) receive key confirmation (encrypted with SK)
  4. State = 3 /\ RCV(RD, {h4(SessKey)}_SessKey) =|>
     State' := 4
     /\ witness(GSS, RD, gss_rd_auth, SessKey)

end role


%%%%%% Cloud Server (CS) %%%%%%

role cloud_server(CS, GSS: agent,
                  SecureChannel: symmetric_key,
                  h1, h2, h3, h4: hash_func,
                  SND, RCV: channel(dy))
played_by CS
def=
local State: nat,
      ID_CS: text
init
  State := 0
transition

  1. State = 0 /\ RCV(start) =|>
     State' := 1
     /\ ID_CS' := new()
     /\ SND({ID_CS'}_SecureChannel)

end role


%%%%%% Session: compõe todos os papéis %%%%%%

role session()
def=
local CR, RD, GSS, CS: agent,
      SecureChannel: symmetric_key,
      h1, h2, h3, h4: hash_func
composition
  control_room(CR, RD, GSS, CS, SecureChannel, h1, h2, h3, h4)
  /\ remote_drone(RD, CR, GSS, SecureChannel, h1, h2, h3, h4)
  /\ ground_station(GSS, CR, RD, CS, SecureChannel, h1, h2, h3, h4)
  /\ cloud_server(CS, GSS, SecureChannel, h1, h2, h3, h4)
end role


%%%%%% Environment + goals %%%%%%

role environment()
def=
const CR, RD, GSS, CS: agent,
      SecureChannel: symmetric_key,
      h1, h2, h3, h4: hash_func
composition
  session()
end role
%%%%%% Autenticacao e chave de sessao %%%%%%
goal
  secrecy_of SessKey
  authentication_on gss_rd_auth
end goal

environment()
